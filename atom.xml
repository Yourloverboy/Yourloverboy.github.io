<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LoverBoy | 个人博客</title>
  
  <subtitle>路长梦荒  思念未亡</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yourloverboy.xyz/"/>
  <updated>2018-12-24T03:36:54.979Z</updated>
  <id>http://yourloverboy.xyz/</id>
  
  <author>
    <name>LoverBoy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js按位运算符</title>
    <link href="http://yourloverboy.xyz/2018/12/23/js%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://yourloverboy.xyz/2018/12/23/js位运算/</id>
    <published>2018-12-23T10:29:54.000Z</published>
    <updated>2018-12-24T03:36:54.979Z</updated>
    
    <content type="html"><![CDATA[<p>位运算可以对由数字表示的二进制数进行更底层的按位运算。JavaScript中有7种位运算符，分别为按位与（&amp;），按位或（ | ），按位异或（^），按位非（~），左移位（&lt;&lt;）,带符号右移位（&gt;&gt;），无符号右移位（&gt;&gt;&gt;）。</p><h1 id="按位与（-amp-）"><a href="#按位与（-amp-）" class="headerlink" title="按位与（&amp;）"></a>按位与（&amp;）</h1><p>&amp;是一个二元运算符（有两个操作数），&amp;对它的整型操作数逐位执行布尔与操作（将十进制转换成二进制），只有两个操作数相对应的位都是1，结果才是1。有一个为0就是0。</p><p>1&amp;3的结果是1</p><p>那么它是怎么运算的呢</p><p>1的二进制表示是 0 0 0 0 0 0 0 1</p><p>3的二进制表示是 0 0 0 0 0 0 1 1</p><p>根据&amp;运算符的规则，得到的结果就是 0 0 0 0 0 0 0 1，转换成十进制表示就是1。</p><h1 id="按位或（-）"><a href="#按位或（-）" class="headerlink" title="按位或（ | ）"></a>按位或（ | ）</h1><p> | 运算符和&amp;运算符的区别就在于只要两个操作数对应的位有一个为1那么结果就是1。</p><p>1|3的结果是3</p><p>1的二进制表示是 0 0 0 0 0 0 0 1</p><p>3的二进制表示是 0 0 0 0 0 0 1 1</p><p>根据 | 运算符的规则，得到的结果就是 0 0 0 0 0 0 1 1，转换成十进制表示就是3。</p><h1 id="按位异或（-）"><a href="#按位异或（-）" class="headerlink" title="按位异或（^）"></a>按位异或（^）</h1><p>^运算符是两个操作数对应的位只有一个为1结果才是1，两个为0结果是0，这里注意两个都为1结果就是0</p><p>1^3的结果是2</p><p>1的二进制表示是 0 0 0 0 0 0 0 1</p><p>3的二进制表示是 0 0 0 0 0 0 1 1</p><p>根据^运算符的规则，得到的结果就是 0 0 0 0 0 0 1 0，转换成十进制表示就是2。</p><h1 id="按位非（-）"><a href="#按位非（-）" class="headerlink" title="按位非（~）"></a>按位非（~）</h1><p>~运算符是一元运算符（一个操作数），将整型操作数进行逐位进行布尔操作（将十进制数转换成二进制），之后逐位求反（1变为0，0变为1）。</p><p>之后会有一篇文章专门讲原码、反码和补码。</p><p>~1(对1的取反)结果是-2</p><p>1转换成二进制表示是 0 0 0 0 0 0 0 1</p><p>计算补码： 0 0 0 0 0 0 0 1</p><p>按位取反： 1 1 1 1 1 1 1 0</p><p>转为原码（符号位不变）：</p><p>​    末位减1： 1 1 1 1 1 1 0 1</p><p>​    按位取反： 1 0 0 0 0 0 1 0</p><p>​    末位加一： 1 0 0 0 0 0 1 0</p><p>转换成十进制就是-2。</p><h1 id="左移位（-lt-lt-）"><a href="#左移位（-lt-lt-）" class="headerlink" title="左移位（&lt;&lt;）"></a>左移位（&lt;&lt;）</h1><p>&lt;&lt;运算符使指定值的二进制所有位都左移规定的次数，对于其移动规则只需记住丢弃最高位，0补最低位即按二进制形式把所有的数字向左移动对应的位数，高位移出(舍弃)，低位的空位补零。</p><p>1&lt;&lt;2结果是4</p><p>1转换成二进制表示是 0 0 0 0 0 0 1</p><p>向左移2位得到： 0 0 0 0 0 1 0 0</p><p>转换成十进制就是4。</p><p>将一个值左移1位就相当于这个值乘以2，左移两位就是乘以4，以此类推。</p><h1 id="带符号右移位（-gt-gt-）"><a href="#带符号右移位（-gt-gt-）" class="headerlink" title="带符号右移位（&gt;&gt;）"></a>带符号右移位（&gt;&gt;）</h1><p>>&gt;运算符使指定值的二进制所有位都右移规定的次数，对于其移动规则只需记住符号位不变，左边补上符号位即按二进制形式把所有的数字向右移动对应的位数，低位移出(舍弃)，高位的空位补符号位，即正数补零，负数补1。</p><p>1&gt;&gt;2结果是0</p><p>7&gt;&gt;2结果是</p><p>7转换成二进制表示是 0 0 0 0 0 1 1 1</p><p>向右移2位得到 0 0 0 0 0 0 0 1</p><p>转换成十进制就是1。</p><p>-7&gt;&gt;2结果是-2</p><p>-7转换成二进制表示是 1 0 0 0 0 1 1 1</p><p>计算补码(符号位不变)：</p><p>​    按位取反：1 1 1 1 1 0 0 0</p><p>​    末位加1： 1 1 1 1 1 0 0 1</p><p>右移两位（高位补1）： 1 1 1 1 1 1 1 0</p><p>计算原码（符号位不变）：</p><p>​    按位取反： 1 0 0 0 0 0 0 1</p><p>​    末位加1： 1 0 0 0 0 0 1 0</p><p>转换成十进制就是-2。</p><p>将一个值右移1位就相当于这个数除以2（忽略小数点部分），右移2位就相当于除以4，依次类推。</p><h1 id="无符号右移位（-gt-gt-gt-）"><a href="#无符号右移位（-gt-gt-gt-）" class="headerlink" title="无符号右移位（&gt;&gt;&gt;）"></a>无符号右移位（&gt;&gt;&gt;）</h1><p>>&gt;&gt;运算符忽略了符号位扩展，0补最高位(与原来数的符号无关)，但是只是对32位和64位的值有意义。</p><p>-1&gt;&gt;2结果是-1</p><p>但是-1&gt;&gt;&gt;2结果是</p><p>-1的二进制是 1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1</p><p>计算补码：</p><p>​    按位取反： 1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 0</p><p>​    末位加1：1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 1</p><p>右移2位，高位补0： 0 0 1 1  1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 1 1 1 1 1</p><p>转换成十进制就是1073741823。</p><h1 id="位运算在js中的妙用"><a href="#位运算在js中的妙用" class="headerlink" title="位运算在js中的妙用"></a>位运算在js中的妙用</h1><h3 id="使用-amp-运算符判断一个数的奇偶"><a href="#使用-amp-运算符判断一个数的奇偶" class="headerlink" title="使用&amp;运算符判断一个数的奇偶"></a>使用&amp;运算符判断一个数的奇偶</h3><p>奇数&amp;1 结果是 1</p><p>偶数&amp;1 结果是 0</p><p>1为奇数，0为偶数。那么3&amp;1=1，4&amp;1=0。</p><h3 id="使用-运算符完成数值的交换"><a href="#使用-运算符完成数值的交换" class="headerlink" title="使用^运算符完成数值的交换"></a>使用^运算符完成数值的交换</h3><p>a=2</p><p>b=3</p><p>a^=b</p><p>b^=a</p><p>a^=b</p><p>结果a=3，b=2。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;位运算可以对由数字表示的二进制数进行更底层的按位运算。JavaScript中有7种位运算符，分别为按位与（&amp;amp;），按位或（ | ），按位异或（^），按位非（~），左移位（&amp;lt;&amp;lt;）,带符号右移位（&amp;gt;&amp;gt;），无符号右移位（&amp;gt;&amp;gt;&amp;gt;）。&lt;
      
    
    </summary>
    
    
      <category term="js" scheme="http://yourloverboy.xyz/tags/js/"/>
    
      <category term="位运算" scheme="http://yourloverboy.xyz/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Shell编程函数的定义和使用</title>
    <link href="http://yourloverboy.xyz/2018/12/22/Shell%E7%BC%96%E7%A8%8B%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://yourloverboy.xyz/2018/12/22/Shell编程函数的定义和使用/</id>
    <published>2018-12-22T06:49:21.000Z</published>
    <updated>2018-12-23T08:18:47.193Z</updated>
    
    <content type="html"><![CDATA[<p>说到函数的声明和调用，学过c语言、java等其他编程语言的人想必都不陌生，也发现其实都是大同小异。今天我们来学习一下shell函数的声明和调用是什么样的，以及哪些是我们需要注意的。</p><h1 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function 函数名()&#123;</span><br><span class="line">    若干条执行语句</span><br><span class="line">    return int</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以function 函数名()定义，也可以直接函数名()定义，不加‘function’关键字。</li><li>不需要任何参数。</li><li>参数返回：可以显示加renturn n(n的值为0~255之间)；或者echo（标准输出）传递给主程序变量。</li></ul><h1 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h1><p>Shell函数的调用和传参与其他语言有不同之处。</p><p>函数必须在定义之后才能调用，不然报错。因为shell脚本是一种解释性语言，也就是读到一行执行一行，当你在定义前调用时根本没有这个函数。这个和编译性语言不同。</p><p>Shell函数的调用分两种：</p><h3 id="在脚本使用之前定义"><a href="#在脚本使用之前定义" class="headerlink" title="在脚本使用之前定义"></a>在脚本使用之前定义</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>filename: fun.sh</span><br><span class="line">fun() &#123;</span><br><span class="line">    echo "我定义的一个函数"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun    #直接写上函数名调用，不需要()执行符</span><br></pre></td></tr></table></figure><p>输出结果：我定义的一个函数</p><h3 id="把函数定义在一个独立的文件使用点号-命令来引用它"><a href="#把函数定义在一个独立的文件使用点号-命令来引用它" class="headerlink" title="把函数定义在一个独立的文件使用点号(.)命令来引用它"></a>把函数定义在一个独立的文件使用点号(.)命令来引用它</h3><p>比如我有两个shell脚本并且在同一目录下，名字分别为fun1.sh和fun2.sh。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>filename: fun1.sh</span><br><span class="line">fun() &#123;</span><br><span class="line">    echo "我定义的一个函数"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>！/bin/bash</span><br><span class="line"><span class="meta">#</span>filename: fun2.sh</span><br><span class="line">. ./fun1.sh    #点号之间有一个空格</span><br><span class="line">fun</span><br></pre></td></tr></table></figure><p>输出结果：我定义的一个函数</p><p>同时，我们也可以在终端中通过点好(.)命令来引用我们定义的函数。</p><p>fun1.sh文件内容</p><p><img src="\images\post_img\shell函数-fun1.PNG" alt="fun1.sh文件"></p><p>直接在终端中调用这个函数（报错！not  found）</p><p><img src="\images\post_img\shell函数-notfound.PNG" alt="not found"></p><p>使用点号(.)引用函数（执行成功）</p><p><img src="\images\post_img\shell函数-成功.PNG" alt="成功"></p><ul><li>首先我们要知道shell脚本的执行是在子进程下执行的，而在子进程下我们没有这个函数命令，所以报错not  found找不到。</li><li>而加上点号的意思就是在当前进程中执行引用这个函数命令。也就是可以成功执行了。</li></ul><h3 id="需要传递参数时"><a href="#需要传递参数时" class="headerlink" title="需要传递参数时"></a>需要传递参数时</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>filename: fun.sh</span><br><span class="line">fun() &#123;</span><br><span class="line">    echo -e "我定义的一个函数\n$num"   #-e用来识别转义字符</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">num=666</span><br><span class="line">fun num  #在调用函数后面空格隔开，写上要传递的参数，多个参数传递时也是参数间空格隔开</span><br></pre></td></tr></table></figure><p>执行输出：我定义的一个函数</p><p>​           666</p><h1 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>filename: sum.sh</span><br><span class="line">sum() &#123;</span><br><span class="line">    var1=$1</span><br><span class="line">    var2=$2</span><br><span class="line">    var=$(($1 + $2))    #$1是第一个变量，$2是第二个变量</span><br><span class="line">    return $var</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read num1 num2</span><br><span class="line">sum num1 num2</span><br><span class="line">echo "这两个数的和是$?"   #$?是一个系统变量，里面保存的是上一个函数的返回值</span><br></pre></td></tr></table></figure><p>假如我们输入的两个数是10和20（也就是num1=10，num2=20）</p><p>执行输出：这两个数的和是30</p><p>又假如我们输入的两个数是255和1（也就是num1=255，num2=1）</p><p>执行输出：这两个数的和是0</p><p>为什么255+1会返回一个0，因为我们前面说过了return只能返回0~255之间的数，关于为什么返回的是0而不是别的数我们后面会讲。</p><h3 id="改进例子"><a href="#改进例子" class="headerlink" title="改进例子"></a>改进例子</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>filename: sum.sh</span><br><span class="line">sum() &#123;</span><br><span class="line">    var1=$1</span><br><span class="line">    var2=$2</span><br><span class="line">    var=$(($1 + $2))</span><br><span class="line">    echo $var     #这里的return改为了echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read num1 num2</span><br><span class="line">sum=$(sum num1 num2)    #这里定义了一个变量sum来接受函数sum传递的值</span><br><span class="line">echo "这两个数的和是$sum"   #这里将$?改为了我们定义的变量$sum</span><br></pre></td></tr></table></figure><p>假如我们输入的两个数是255和1（也就是num1=255，num2=1）</p><p>执行输出：这两个数的和是256</p><p>这样好像就没毛病了，没有返回值的范围限制，结果也是正确的。但是真的是这样吗？如果我们要给我们的函数输出一些修饰语句呢？看下面。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假如我们输入的两个数是255和1（也就是num1=255，num2=1）</p><p>理想输出：这是一个求和函数</p><p>​          sum=256</p><p>但是我们想的真的和计算机一样吗，看下面。</p><p>实际输出：sum=这是一个求和函数</p><p>​          256</p><p>为什么会这样？echo不是一个返回值，我们前面说过是echo（标准输出）是将传递给主程序的变量。也就是如果我们在主程序中设置了一个变量并且函数是用echo（标准输出）来传递值给主程序变量时，会将所有echo（标准输出）的语句都传递给这个变量，也就产生了上面那种输出结果。</p><h1 id="使用return还是echo"><a href="#使用return还是echo" class="headerlink" title="使用return还是echo"></a>使用return还是echo</h1><p>在上面的学习中，我们知道了return的返回范围只能在0~255之间，并且是被保存在了一个系统变量$?里面（后面会列出一些比较常见的一些系统变量）；</p><p>而使用echo没有数值大小的限制和变量类型的限制，是将echo(标准输出)的东西传递给主程序的变量，多个echo会造成意料之外的一些情况。</p><p>我们知道了上面这些，就可以在编写我们自己的函数时合理选择是使用return或者是echo了。</p><h1 id="一些常见的系统变量"><a href="#一些常见的系统变量" class="headerlink" title="一些常见的系统变量"></a>一些常见的系统变量</h1><ul><li>​        $? 表示函数的返回值；</li><li>​    $n表示传递给脚本或者函数的第几个参数（n是一个数字）；</li><li>​    $*表示传递给脚本或函数的所有参数；</li><li>​    $#表示传递给脚本或者函数的个数；</li><li>​    $0表示当前执行的进程名；</li><li>​    $$表示当前进程的进程号；</li></ul><p>知道这些系统变量之后，我们可以做一个任意个数的四则运算。我们可以用for循环来遍历，将$#作为条件，$n就是第几个参数这样作四则运算。</p><h1 id="Shell退出状态码整理"><a href="#Shell退出状态码整理" class="headerlink" title="Shell退出状态码整理"></a>Shell退出状态码整理</h1><p>shell中运行的每个命令都使用退出状态码（exit status）来告诉shell它完成了处理。退出状态码是一个0~255之间的整数值，在命令结束时由命令传回shell。</p><p>1、查看推出状态码<br>​    Linux提供了$?专属变量保存上一个执行的命令的退出状态码。你可以在你运行一个命令之后查看（echo $?）。<br>​    几个典型的退出状态码及其意义：<br>​            0—————-命令运行成功<br>​            1—————-通知未知错误<br>​            2—————-误用shell命令<br>​            126————-命令不可执行<br>​            127————-没有找到命令<br>​            128————-无效退出参数<br>​            128+x———–linux信号x的严重错误<br>​            130————–命令通过Ctrl+C终止<br>​            255————–退出状态码越界</p><p>2、exit命令<br>      用于shell 脚本中指定退出状态码。<br>       也就是自己显示的设置return返回的值<br>​        退出状态码的最大只能是255。若其大于255，则返回模除（%）256后的余数。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说到函数的声明和调用，学过c语言、java等其他编程语言的人想必都不陌生，也发现其实都是大同小异。今天我们来学习一下shell函数的声明和调用是什么样的，以及哪些是我们需要注意的。&lt;/p&gt;
&lt;h1 id=&quot;语法格式&quot;&gt;&lt;a href=&quot;#语法格式&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="Shell编程" scheme="http://yourloverboy.xyz/tags/Shell%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Linux" scheme="http://yourloverboy.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>原生js鼠标点击页面效果</title>
    <link href="http://yourloverboy.xyz/2018/12/22/%E5%8E%9F%E7%94%9Fjs%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E9%A1%B5%E9%9D%A2%E6%95%88%E6%9E%9C/"/>
    <id>http://yourloverboy.xyz/2018/12/22/原生js鼠标点击页面效果/</id>
    <published>2018-12-22T06:19:18.000Z</published>
    <updated>2018-12-23T08:17:48.370Z</updated>
    
    <content type="html"><![CDATA[<p>在进入这个网站的时候我们点击的时候就已经看到了一个点击页面弹出字或者表情的一个效果。现在我们使用原生js来实现一下。</p><p>我将代码放在了下方，并且一些内容我会在代码里面注释出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;   <span class="comment">//ES5严格模式，可不加</span></span><br><span class="line">onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> click_cnt = <span class="number">0</span>;    <span class="comment">//统计点击次数 </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//获取html和doay标签元素</span></span><br><span class="line">    <span class="keyword">var</span> $html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"html"</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> $body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//绑定点击事件</span></span><br><span class="line">    $html.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个b标签</span></span><br><span class="line">        <span class="keyword">var</span> $elem = <span class="built_in">document</span>.createElement(<span class="string">"b"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//给b标签加上css样式</span></span><br><span class="line">        $elem.style.color = <span class="string">"#E94F06"</span>;</span><br><span class="line">        $elem.style.zIndex = <span class="number">99999</span>;</span><br><span class="line">        $elem.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">        $elem.style.select = <span class="string">"none"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取鼠标点击的点</span></span><br><span class="line">        <span class="keyword">var</span> x = e.pageX;</span><br><span class="line">        <span class="keyword">var</span> y = e.pageY;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置效果在鼠标点击的位置</span></span><br><span class="line">        $elem.style.left = (x - <span class="number">10</span>) + <span class="string">"px"</span>;</span><br><span class="line">        $elem.style.top = (y - <span class="number">20</span>) + <span class="string">"px"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据点击次数出现的文字或者表情</span></span><br><span class="line">        <span class="keyword">switch</span> (++click_cnt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"OωO"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"(๑•́ ∀ •̀๑)"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">30</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"(๑•́ ₃ •̀๑)"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"(๑•̀_•́๑)"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">50</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"(๑˙ー˙๑)"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">60</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"(╯°口°)╯(┴—┴"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">70</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"૮( ᵒ̌皿ᵒ̌ )ა"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"╮(｡&gt;口&lt;｡)╭"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">90</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"( ง ᵒ̌皿ᵒ̌)ง⁼³₌₃"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">101</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">102</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">103</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">104</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">105</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"(ꐦ°᷄д°᷅)"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"你点我~"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置出现文字的随机大小</span></span><br><span class="line">        $elem.style.fontSize = <span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">8</span> + <span class="string">"px"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置文字的运动效果，利用时间戳</span></span><br><span class="line">        <span class="keyword">var</span> increase = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> anim;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            anim = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (++increase == <span class="number">150</span>) &#123;</span><br><span class="line">                    clearInterval(anim);</span><br><span class="line">                    $body.removeChild($elem);</span><br><span class="line">                &#125;</span><br><span class="line">                $elem.style.top = y - <span class="number">20</span> - increase + <span class="string">"px"</span>;</span><br><span class="line">                $elem.style.opacity = (<span class="number">150</span> - increase) / <span class="number">120</span>;</span><br><span class="line">            &#125;, <span class="number">8</span>);</span><br><span class="line">        &#125;, <span class="number">70</span>);</span><br><span class="line">        $body.appendChild($elem);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面就是完整的一个鼠标点击页面效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在进入这个网站的时候我们点击的时候就已经看到了一个点击页面弹出字或者表情的一个效果。现在我们使用原生js来实现一下。&lt;/p&gt;
&lt;p&gt;我将代码放在了下方，并且一些内容我会在代码里面注释出来：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="js" scheme="http://yourloverboy.xyz/tags/js/"/>
    
      <category term="前端" scheme="http://yourloverboy.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="网页" scheme="http://yourloverboy.xyz/tags/%E7%BD%91%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>Linux下简单使用make、makefile</title>
    <link href="http://yourloverboy.xyz/2018/11/18/makefile%E4%BD%BF%E7%94%A8/"/>
    <id>http://yourloverboy.xyz/2018/11/18/makefile使用/</id>
    <published>2018-11-18T06:20:11.000Z</published>
    <updated>2018-11-18T11:16:40.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="make是什么？"><a href="#make是什么？" class="headerlink" title="make是什么？"></a>make是什么？</h1><p>make的功能：make是一个解释makefile中指令的命令工具。他可以简化编译过程里面所下达的指令，当执行make时，make会在当前的目录下搜寻makefile（Makefile）这个文本文件（可以理解为编译的配置文件），执行对应的操作。make会自动的判别原始码是否经过变动了，而自动更新执行档。</p><p>原理：当make指令第一次执行时，它会扫描makefile找到目标以及其依赖。看这些依赖是否是目标，如果是那就继续为这些依赖扫描makefile找到它的依赖关系，建立它，并执行其方法。如果不是直接就可以建立关系，编译它们。</p><h1 id="为什么要使用make？"><a href="#为什么要使用make？" class="headerlink" title="为什么要使用make？"></a>为什么要使用make？</h1><p>假设，现在一个项目里面包含了100个程序文件，如果要对这个项目进行编译，那么光是编译指令就是100条。如果要重新进行编译，那么就得像之前全部重来一次。这么低效的方法我们程序员肯定是忍不了，不符合我们程序员的作风。所以，用make来进行操作，间接的调用gcc岂不是很便捷？如果我们更动过某些源文件，make也可以主动的判断哪一个源文件与相关的目标文件有更新过，并且仅更新该目标文件。这样不但减少了重新编译所需要的时间，使用起来也更加方便。</p><h1 id="gcc编译器和make命令工具安装"><a href="#gcc编译器和make命令工具安装" class="headerlink" title="gcc编译器和make命令工具安装"></a>gcc编译器和make命令工具安装</h1><p>在Linux终端中执行</p><p>安装gcc编译器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc</span><br></pre></td></tr></table></figure><p>安装make命令工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install make</span><br></pre></td></tr></table></figure><p>两个一路等待下载执行完成。</p><h1 id="makefile的规则语法"><a href="#makefile的规则语法" class="headerlink" title="makefile的规则语法"></a>makefile的规则语法</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">目标（target）: 目标文件1 目标文件2</span><br><span class="line">gcc -o 预建立的执行文件 目标文件1 目标文件2</span><br></pre></td></tr></table></figure><p>注意：建立执行语法（也就是gcc那条语句）必须以tab键开头，不可以使用空格代替。</p><p>目标（target）就是我们想要建立的信息，而目标文件就是具有相关性的object files。</p><p>语法：</p><ul><li><p>在makefile当中的#代表批注；</p></li><li><p>tab键需要在命令行（例如gcc这个编译程序指令）的开头第一个字符；</p></li><li><p>目标（target）与相关目标文件之间需要用 : (分号)隔开；</p></li></ul><h1 id="makefile使用举例说明"><a href="#makefile使用举例说明" class="headerlink" title="makefile使用举例说明"></a>makefile使用举例说明</h1><p>我们要编译main.c、test1.h、test2.h、test3.h生成可执行程序TEST。</p><p>我们可以直接使用gcc这样写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o TEST main.c test1.h test2.h test3.h</span><br></pre></td></tr></table></figure><p>但是就像上面说的，我们之后发现了test2.c里面的内容写错了，改好之后要重新编译，我们接着输入上面的命令进行编译。但是如果我们一个项目有很多文件时，就很麻烦了。我们可以写个makefile简化方便执行。</p><p>创建一个makefile或者Makefile文件（必须是），因为make指令在编译时它会查找以下文件是否有makefile或者Mkefile：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch makefile</span><br></pre></td></tr></table></figure><p>vi命令进入makefile：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi makefile</span><br></pre></td></tr></table></figure><p>修改makefile文件如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TEST： main.c test1.h test2.h test3.h</span><br><span class="line">gcc -o TEST main.c test1.h test2.h test3.h</span><br></pre></td></tr></table></figure><p>我的main.c、test1.h、test2.h、test3.h内容如下：</p><p><img src="\images\post_img\makefile-源代码.PNG" alt="我的源代码"></p><p>一切准备完成之后，我们直接执行make即可编译文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><img src="\images\post_img\makefile-执行完make.PNG" alt="执行make"></p><p>编译完成后，我们看到目录下产生了TEST文件，接下来执行它试试看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./TEST</span><br></pre></td></tr></table></figure><p><img src="\images\post_img\makefile-TEST执行.PNG" alt="执行TEST"></p><p>如果不想让编译规则显示在屏幕上，只要在编译规则前面加个@。</p><p>如果现在再对文件编译一次会发生什么呢？可以试一下。</p><p>如果修改了其中一个文件再编译一下又会发生什么？</p><p>现在我们在makefile里面定义一个clean，用来执行rm的操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TEST： main.c test1.h test2.h test3.h</span><br><span class="line">gcc -o TEST main.c test1.h test2.h test3.h</span><br><span class="line">clean: </span><br><span class="line">rm -f TEST</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure><p><img src="\images\post_img\makefile-clean.PNG" alt="加入clean"></p><p>这里调用了clean，就把之前编译完成的TEST文件删除了。</p><p>像我们有多个文件需要处理，可以在makefile里面定义一个变量：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OBJS = main.c test1.h test2.h test3.h</span><br><span class="line">TEST： <span class="variable">$(OBJS)</span></span><br><span class="line">gcc -o TEST <span class="variable">$(OBJS)</span></span><br><span class="line"><span class="section">clean: </span></span><br><span class="line">rm -f TEST</span><br></pre></td></tr></table></figure><p>结果和上面写法一样，如果我们执行make clean TEST，先调用clean清除，然后调用了TEST编译。</p><p>注意：</p><ul><li>变量名左边不可以加tab键；</li><li>变量与变量内容用 = （等号）隔开；</li><li>变量名最好大写，为了编码风格；</li><li>运用变量时，以$(变量名)或者${变量名}使用；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;make是什么？&quot;&gt;&lt;a href=&quot;#make是什么？&quot; class=&quot;headerlink&quot; title=&quot;make是什么？&quot;&gt;&lt;/a&gt;make是什么？&lt;/h1&gt;&lt;p&gt;make的功能：make是一个解释makefile中指令的命令工具。他可以简化编译过程里面所
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yourloverboy.xyz/tags/Linux/"/>
    
  </entry>
  
</feed>
