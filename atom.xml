<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LoverBoy | 个人博客</title>
  
  <subtitle>路长梦荒  思念未亡</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yourloverboy.xyz/"/>
  <updated>2018-12-22T06:45:25.755Z</updated>
  <id>http://yourloverboy.xyz/</id>
  
  <author>
    <name>LoverBoy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>原生js鼠标点击页面效果</title>
    <link href="http://yourloverboy.xyz/2018/12/22/%E5%8E%9F%E7%94%9Fjs%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E9%A1%B5%E9%9D%A2%E6%95%88%E6%9E%9C/"/>
    <id>http://yourloverboy.xyz/2018/12/22/原生js鼠标点击页面效果/</id>
    <published>2018-12-22T06:19:18.000Z</published>
    <updated>2018-12-22T06:45:25.755Z</updated>
    
    <content type="html"><![CDATA[<p>在进入这个网站的时候我们点击的时候就已经看到了一个点击页面弹出字或者表情的一个效果。现在我们使用原生js来实现一下。</p><p>我将代码放在了下方，并且一些内容我会在代码里面注释出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;   <span class="comment">//ES5严格模式，可不加</span></span><br><span class="line">onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> click_cnt = <span class="number">0</span>;    <span class="comment">//统计点击次数 </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//获取html和doay标签元素</span></span><br><span class="line">    <span class="keyword">var</span> $html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"html"</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> $body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//绑定点击事件</span></span><br><span class="line">    $html.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个b标签</span></span><br><span class="line">        <span class="keyword">var</span> $elem = <span class="built_in">document</span>.createElement(<span class="string">"b"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//给b标签加上css样式</span></span><br><span class="line">        $elem.style.color = <span class="string">"#E94F06"</span>;</span><br><span class="line">        $elem.style.zIndex = <span class="number">99999</span>;</span><br><span class="line">        $elem.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">        $elem.style.select = <span class="string">"none"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取鼠标点击的点</span></span><br><span class="line">        <span class="keyword">var</span> x = e.pageX;</span><br><span class="line">        <span class="keyword">var</span> y = e.pageY;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置效果在鼠标点击的位置</span></span><br><span class="line">        $elem.style.left = (x - <span class="number">10</span>) + <span class="string">"px"</span>;</span><br><span class="line">        $elem.style.top = (y - <span class="number">20</span>) + <span class="string">"px"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据点击次数出现的文字或者表情</span></span><br><span class="line">        <span class="keyword">switch</span> (++click_cnt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"OωO"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"(๑•́ ∀ •̀๑)"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">30</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"(๑•́ ₃ •̀๑)"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"(๑•̀_•́๑)"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">50</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"(๑˙ー˙๑)"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">60</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"(╯°口°)╯(┴—┴"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">70</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"૮( ᵒ̌皿ᵒ̌ )ა"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"╮(｡&gt;口&lt;｡)╭"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">90</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"( ง ᵒ̌皿ᵒ̌)ง⁼³₌₃"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">101</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">102</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">103</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">104</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">105</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"(ꐦ°᷄д°᷅)"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                $elem.innerText = <span class="string">"你点我~"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置出现文字的随机大小</span></span><br><span class="line">        $elem.style.fontSize = <span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">8</span> + <span class="string">"px"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置文字的运动效果，利用时间戳</span></span><br><span class="line">        <span class="keyword">var</span> increase = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> anim;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            anim = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (++increase == <span class="number">150</span>) &#123;</span><br><span class="line">                    clearInterval(anim);</span><br><span class="line">                    $body.removeChild($elem);</span><br><span class="line">                &#125;</span><br><span class="line">                $elem.style.top = y - <span class="number">20</span> - increase + <span class="string">"px"</span>;</span><br><span class="line">                $elem.style.opacity = (<span class="number">150</span> - increase) / <span class="number">120</span>;</span><br><span class="line">            &#125;, <span class="number">8</span>);</span><br><span class="line">        &#125;, <span class="number">70</span>);</span><br><span class="line">        $body.appendChild($elem);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面就是完整的一个鼠标点击页面效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在进入这个网站的时候我们点击的时候就已经看到了一个点击页面弹出字或者表情的一个效果。现在我们使用原生js来实现一下。&lt;/p&gt;
&lt;p&gt;我将代码放在了下方，并且一些内容我会在代码里面注释出来：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="js" scheme="http://yourloverboy.xyz/tags/js/"/>
    
      <category term="前端" scheme="http://yourloverboy.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="网页" scheme="http://yourloverboy.xyz/tags/%E7%BD%91%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>Linux下简单使用make、makefile</title>
    <link href="http://yourloverboy.xyz/2018/11/18/makefile%E4%BD%BF%E7%94%A8/"/>
    <id>http://yourloverboy.xyz/2018/11/18/makefile使用/</id>
    <published>2018-11-18T06:20:11.000Z</published>
    <updated>2018-11-18T11:16:40.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="make是什么？"><a href="#make是什么？" class="headerlink" title="make是什么？"></a>make是什么？</h1><p>make的功能：make是一个解释makefile中指令的命令工具。他可以简化编译过程里面所下达的指令，当执行make时，make会在当前的目录下搜寻makefile（Makefile）这个文本文件（可以理解为编译的配置文件），执行对应的操作。make会自动的判别原始码是否经过变动了，而自动更新执行档。</p><p>原理：当make指令第一次执行时，它会扫描makefile找到目标以及其依赖。看这些依赖是否是目标，如果是那就继续为这些依赖扫描makefile找到它的依赖关系，建立它，并执行其方法。如果不是直接就可以建立关系，编译它们。</p><h1 id="为什么要使用make？"><a href="#为什么要使用make？" class="headerlink" title="为什么要使用make？"></a>为什么要使用make？</h1><p>假设，现在一个项目里面包含了100个程序文件，如果要对这个项目进行编译，那么光是编译指令就是100条。如果要重新进行编译，那么就得像之前全部重来一次。这么低效的方法我们程序员肯定是忍不了，不符合我们程序员的作风。所以，用make来进行操作，间接的调用gcc岂不是很便捷？如果我们更动过某些源文件，make也可以主动的判断哪一个源文件与相关的目标文件有更新过，并且仅更新该目标文件。这样不但减少了重新编译所需要的时间，使用起来也更加方便。</p><h1 id="gcc编译器和make命令工具安装"><a href="#gcc编译器和make命令工具安装" class="headerlink" title="gcc编译器和make命令工具安装"></a>gcc编译器和make命令工具安装</h1><p>在Linux终端中执行</p><p>安装gcc编译器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc</span><br></pre></td></tr></table></figure><p>安装make命令工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install make</span><br></pre></td></tr></table></figure><p>两个一路等待下载执行完成。</p><h1 id="makefile的规则语法"><a href="#makefile的规则语法" class="headerlink" title="makefile的规则语法"></a>makefile的规则语法</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">目标（target）: 目标文件1 目标文件2</span><br><span class="line">gcc -o 预建立的执行文件 目标文件1 目标文件2</span><br></pre></td></tr></table></figure><p>注意：建立执行语法（也就是gcc那条语句）必须以tab键开头，不可以使用空格代替。</p><p>目标（target）就是我们想要建立的信息，而目标文件就是具有相关性的object files。</p><p>语法：</p><ul><li><p>在makefile当中的#代表批注；</p></li><li><p>tab键需要在命令行（例如gcc这个编译程序指令）的开头第一个字符；</p></li><li><p>目标（target）与相关目标文件之间需要用 : (分号)隔开；</p></li></ul><h1 id="makefile使用举例说明"><a href="#makefile使用举例说明" class="headerlink" title="makefile使用举例说明"></a>makefile使用举例说明</h1><p>我们要编译main.c、test1.h、test2.h、test3.h生成可执行程序TEST。</p><p>我们可以直接使用gcc这样写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o TEST main.c test1.h test2.h test3.h</span><br></pre></td></tr></table></figure><p>但是就像上面说的，我们之后发现了test2.c里面的内容写错了，改好之后要重新编译，我们接着输入上面的命令进行编译。但是如果我们一个项目有很多文件时，就很麻烦了。我们可以写个makefile简化方便执行。</p><p>创建一个makefile或者Makefile文件（必须是），因为make指令在编译时它会查找以下文件是否有makefile或者Mkefile：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch makefile</span><br></pre></td></tr></table></figure><p>vi命令进入makefile：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi makefile</span><br></pre></td></tr></table></figure><p>修改makefile文件如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TEST： main.c test1.h test2.h test3.h</span><br><span class="line">gcc -o TEST main.c test1.h test2.h test3.h</span><br></pre></td></tr></table></figure><p>我的main.c、test1.h、test2.h、test3.h内容如下：</p><p><img src="\images\post_img\makefile-源代码.PNG" alt="我的源代码"></p><p>一切准备完成之后，我们直接执行make即可编译文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><img src="\images\post_img\makefile-执行完make.PNG" alt="执行make"></p><p>编译完成后，我们看到目录下产生了TEST文件，接下来执行它试试看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./TEST</span><br></pre></td></tr></table></figure><p><img src="\images\post_img\makefile-TEST执行.PNG" alt="执行TEST"></p><p>如果不想让编译规则显示在屏幕上，只要在编译规则前面加个@。</p><p>如果现在再对文件编译一次会发生什么呢？可以试一下。</p><p>如果修改了其中一个文件再编译一下又会发生什么？</p><p>现在我们在makefile里面定义一个clean，用来执行rm的操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TEST： main.c test1.h test2.h test3.h</span><br><span class="line">gcc -o TEST main.c test1.h test2.h test3.h</span><br><span class="line">clean: </span><br><span class="line">rm -f TEST</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure><p><img src="\images\post_img\makefile-clean.PNG" alt="加入clean"></p><p>这里调用了clean，就把之前编译完成的TEST文件删除了。</p><p>像我们有多个文件需要处理，可以在makefile里面定义一个变量：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OBJS = main.c test1.h test2.h test3.h</span><br><span class="line">TEST： <span class="variable">$(OBJS)</span></span><br><span class="line">gcc -o TEST <span class="variable">$(OBJS)</span></span><br><span class="line"><span class="section">clean: </span></span><br><span class="line">rm -f TEST</span><br></pre></td></tr></table></figure><p>结果和上面写法一样，如果我们执行make clean TEST，先调用clean清除，然后调用了TEST编译。</p><p>注意：</p><ul><li>变量名左边不可以加tab键；</li><li>变量与变量内容用 = （等号）隔开；</li><li>变量名最好大写，为了编码风格；</li><li>运用变量时，以$(变量名)或者${变量名}使用；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;make是什么？&quot;&gt;&lt;a href=&quot;#make是什么？&quot; class=&quot;headerlink&quot; title=&quot;make是什么？&quot;&gt;&lt;/a&gt;make是什么？&lt;/h1&gt;&lt;p&gt;make的功能：make是一个解释makefile中指令的命令工具。他可以简化编译过程里面所
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yourloverboy.xyz/tags/Linux/"/>
    
  </entry>
  
</feed>
